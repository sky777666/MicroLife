{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/lukemyers/Desktop/NewProjects2020/MicroLife/components/Weather.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\n\nvar Weather = function Weather(_ref) {\n  var description = _ref.description,\n      city = _ref.city,\n      country = _ref.country,\n      error = _ref.error,\n      temperature = _ref.temperature;\n\n  if (description) {\n    var weatherDescription = description.split(' ');\n    var keyWords = ['cloudy', 'clouds', 'cloud', 'overcast'];\n\n    for (var i = 0; i < weatherDescription.length; i++) {\n      if (keyWords.includes(weatherDescription[i])) {\n        console.log(weatherDescription[i], ': we have a match');\n      }\n    }\n\n    console.log(keyWords);\n    console.log(weatherDescription);\n  }\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, city && country && __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 33\n    }\n  }, city, \", \", country), temperature && __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 29\n    }\n  }, temperature, \"  \\xB0F\"), description && __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 29\n    }\n  }, \" Conditions: \", description), error && __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 23\n    }\n  }, error));\n};\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/lukemyers/Desktop/NewProjects2020/MicroLife/components/Weather.js"],"names":["React","Weather","description","city","country","error","temperature","weatherDescription","split","keyWords","i","length","includes","console","log"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAsD;AAAA,MAApDC,WAAoD,QAApDA,WAAoD;AAAA,MAAvCC,IAAuC,QAAvCA,IAAuC;AAAA,MAAjCC,OAAiC,QAAjCA,OAAiC;AAAA,MAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,MAAjBC,WAAiB,QAAjBA,WAAiB;;AAElE,MAAGJ,WAAH,EAAgB;AACZ,QAAMK,kBAAkB,GAAGL,WAAW,CAACM,KAAZ,CAAkB,GAAlB,CAA3B;AACA,QAAMC,QAAQ,GAAG,CAAC,QAAD,EAAU,QAAV,EAAoB,OAApB,EAA6B,UAA7B,CAAjB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,kBAAkB,CAACI,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAC/C,UAAGD,QAAQ,CAACG,QAAT,CAAkBL,kBAAkB,CAACG,CAAD,CAApC,CAAH,EAA6C;AACzCG,QAAAA,OAAO,CAACC,GAAR,CAAYP,kBAAkB,CAACG,CAAD,CAA9B,EAAmC,mBAAnC;AACH;AACJ;;AACDG,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYP,kBAAZ;AAEH;;AAED,SAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,IAAI,IAAIC,OAAR,IAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,IAAJ,QAAYC,OAAZ,CADxB,EAEKE,WAAW,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,WAAJ,YAFpB,EAGKJ,WAAW,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAiBA,WAAjB,CAHpB,EAIKG,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,KAAJ,CAJd,CAFJ;AASH,CAxBD;;KAAMJ,O;AA0BN,eAAeA,OAAf","sourcesContent":["import React from 'react'\n\nconst Weather = ({description, city, country, error, temperature}) => {\n\n    if(description) {\n        const weatherDescription = description.split(' ')\n        const keyWords = ['cloudy','clouds', 'cloud', 'overcast']\n        for(let i = 0; i < weatherDescription.length; i++) {\n            if(keyWords.includes(weatherDescription[i])) {\n                console.log(weatherDescription[i], ': we have a match')\n            }\n        }\n        console.log(keyWords)\n        console.log(weatherDescription)\n\n    }\n\n    return (\n\n        <div>\n            {city && country && <p>{city}, {country}</p>}\n            {temperature && <p>{temperature}  Â°F</p>}\n            {description && <p> Conditions: {description}</p>}\n            {error && <p>{error}</p>}\n        </div>\n    )\n}\n\nexport default Weather; "]},"metadata":{},"sourceType":"module"}