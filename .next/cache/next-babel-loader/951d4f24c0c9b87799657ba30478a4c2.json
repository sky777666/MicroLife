{"ast":null,"code":"var _jsxFileName = \"/Users/lukemyers/Desktop/NewProjects2020/MicroLife/components/Weather.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react'; // WEATHER API \n\nconst {\n  0: weather,\n  1: setWeather\n} = useState([]); // const APIKEY = `${APIKEY}`\n\nconst APIKEY = '0b19f325bc0d435df2d6ef551d0c5e32';\n\nasync function fetchData(e) {\n  const city = e.target.elements.city.value;\n  const country = e.target.elements.country.value;\n  e.preventDefault();\n  const apiData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=${APIKEY}`) //const apiData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${APIKEY}`)\n  .then(res => res.json()).then(data => data);\n\n  if (city && country) {\n    setWeather({\n      data: apiData,\n      city: apiData.city,\n      country: apiData.sys.country,\n      description: apiData.weather[0].description,\n      temperature: apiData.main.temp,\n      error: \"\"\n    });\n  } else {\n    setWeather({\n      data: '',\n      city: '',\n      country: '',\n      description: '',\n      temperature: '',\n      error: \"Please Type A City And Country\"\n    });\n  }\n}\n\nconst Weather = ({\n  description,\n  city,\n  country,\n  error,\n  temperature\n}) => {\n  if (description) {\n    const weatherDescription = description.split(' ');\n    const keyWords = ['cloudy', 'clouds', 'cloud', 'overcast'];\n\n    for (let i = 0; i < weatherDescription.length; i++) {\n      if (keyWords.includes(weatherDescription[i])) {\n        console.log(weatherDescription[i], ': we have a match');\n      }\n    }\n\n    console.log(keyWords);\n    console.log(weatherDescription);\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, city && country && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 33\n    }\n  }, city, \", \", country), temperature && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 29\n    }\n  }, temperature, \"  \\xB0F\"), description && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }\n  }, \" Conditions: \", description), error && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 23\n    }\n  }, error));\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/lukemyers/Desktop/NewProjects2020/MicroLife/components/Weather.js"],"names":["React","useState","weather","setWeather","APIKEY","fetchData","e","city","target","elements","value","country","preventDefault","apiData","fetch","then","res","json","data","sys","description","temperature","main","temp","error","Weather","weatherDescription","split","keyWords","i","length","includes","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\n\n\n\n\n// WEATHER API \nconst [weather,setWeather] = useState([])\n  // const APIKEY = `${APIKEY}`\n  const  APIKEY = '0b19f325bc0d435df2d6ef551d0c5e32'\n\n  async function fetchData(e) {\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n      e.preventDefault()\n      const apiData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=${APIKEY}`)\n    //const apiData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${APIKEY}`)\n      .then( res => res.json())\n      .then(data => data)\n      if(city && country) {\n      setWeather({\n        data: apiData,\n        city: apiData.city,\n        country: apiData.sys.country,\n        description: apiData.weather[0].description,\n        temperature: apiData.main.temp,\n        error:\"\"\n      }\n      )} else {\n        setWeather({\n          data: '',\n          city: '',\n          country: '',\n          description: '',\n          temperature: '',\n          error:\"Please Type A City And Country\"\n      }\n      )}\n  }\n\n\n\n\nconst Weather = ({description, city, country, error, temperature}) => {\n\n    if(description) {\n        const weatherDescription = description.split(' ')\n        const keyWords = ['cloudy','clouds', 'cloud', 'overcast']\n        for(let i = 0; i < weatherDescription.length; i++) {\n            if(keyWords.includes(weatherDescription[i])) {\n                console.log(weatherDescription[i], ': we have a match')\n            }\n        }\n        console.log(keyWords)\n        console.log(weatherDescription)\n\n    }\n\n    return (\n\n        <div>\n            {city && country && <p>{city}, {country}</p>}\n            {temperature && <p>{temperature}  Â°F</p>}\n            {description && <p> Conditions: {description}</p>}\n            {error && <p>{error}</p>}\n        </div>\n    )\n}\n\nexport default Weather; "]},"metadata":{},"sourceType":"module"}