{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/lukemyers/Desktop/NewProjects2020/MicroLife/components/Weather.js\";\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react'; // WEATHER API \n\nvar _useState = useState([]),\n    weather = _useState[0],\n    setWeather = _useState[1]; // const APIKEY = `${APIKEY}`\n\n\nvar APIKEY = '0b19f325bc0d435df2d6ef551d0c5e32';\n\nfunction fetchData(_x) {\n  return _fetchData.apply(this, arguments);\n}\n\nfunction _fetchData() {\n  _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n    var city, country, apiData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            city = e.target.elements.city.value;\n            country = e.target.elements.country.value;\n            e.preventDefault();\n            _context.next = 5;\n            return fetch(\"https://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=\".concat(APIKEY)) //const apiData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${APIKEY}`)\n            .then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              return data;\n            });\n\n          case 5:\n            apiData = _context.sent;\n\n            if (city && country) {\n              setWeather({\n                data: apiData,\n                city: apiData.city,\n                country: apiData.sys.country,\n                description: apiData.weather[0].description,\n                temperature: apiData.main.temp,\n                error: \"\"\n              });\n            } else {\n              setWeather({\n                data: '',\n                city: '',\n                country: '',\n                description: '',\n                temperature: '',\n                error: \"Please Type A City And Country\"\n              });\n            }\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchData.apply(this, arguments);\n}\n\nvar Weather = function Weather(_ref) {\n  var description = _ref.description,\n      city = _ref.city,\n      country = _ref.country,\n      error = _ref.error,\n      temperature = _ref.temperature;\n\n  if (description) {\n    var weatherDescription = description.split(' ');\n    var keyWords = ['cloudy', 'clouds', 'cloud', 'overcast'];\n\n    for (var i = 0; i < weatherDescription.length; i++) {\n      if (keyWords.includes(weatherDescription[i])) {\n        console.log(weatherDescription[i], ': we have a match');\n      }\n    }\n\n    console.log(keyWords);\n    console.log(weatherDescription);\n  }\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, city && country && __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 33\n    }\n  }, city, \", \", country), temperature && __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 29\n    }\n  }, temperature, \"  \\xB0F\"), description && __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }\n  }, \" Conditions: \", description), error && __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 23\n    }\n  }, error));\n};\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["/Users/lukemyers/Desktop/NewProjects2020/MicroLife/components/Weather.js"],"names":["React","useState","weather","setWeather","APIKEY","fetchData","e","city","target","elements","value","country","preventDefault","fetch","then","res","json","data","apiData","sys","description","temperature","main","temp","error","Weather","weatherDescription","split","keyWords","i","length","includes","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\n\n\n\n\n// WEATHER API \nconst [weather,setWeather] = useState([])\n  // const APIKEY = `${APIKEY}`\n  const  APIKEY = '0b19f325bc0d435df2d6ef551d0c5e32'\n\n  async function fetchData(e) {\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n      e.preventDefault()\n      const apiData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=${APIKEY}`)\n    //const apiData = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${APIKEY}`)\n      .then( res => res.json())\n      .then(data => data)\n      if(city && country) {\n      setWeather({\n        data: apiData,\n        city: apiData.city,\n        country: apiData.sys.country,\n        description: apiData.weather[0].description,\n        temperature: apiData.main.temp,\n        error:\"\"\n      }\n      )} else {\n        setWeather({\n          data: '',\n          city: '',\n          country: '',\n          description: '',\n          temperature: '',\n          error:\"Please Type A City And Country\"\n      }\n      )}\n  }\n\n\n\n\nconst Weather = ({description, city, country, error, temperature}) => {\n\n    if(description) {\n        const weatherDescription = description.split(' ')\n        const keyWords = ['cloudy','clouds', 'cloud', 'overcast']\n        for(let i = 0; i < weatherDescription.length; i++) {\n            if(keyWords.includes(weatherDescription[i])) {\n                console.log(weatherDescription[i], ': we have a match')\n            }\n        }\n        console.log(keyWords)\n        console.log(weatherDescription)\n\n    }\n\n    return (\n\n        <div>\n            {city && country && <p>{city}, {country}</p>}\n            {temperature && <p>{temperature}  Â°F</p>}\n            {description && <p> Conditions: {description}</p>}\n            {error && <p>{error}</p>}\n        </div>\n    )\n}\n\nexport default Weather; "]},"metadata":{},"sourceType":"module"}